// Code generated by gocc; DO NOT EDIT.

package parser

import (
	"minicompiler/ast" 
)

type (
	ProdTab      [numProductions]ProdTabEntry
	ProdTabEntry struct {
		String     string
		Id         string
		NTType     int
		Index      int
		NumSymbols int
		ReduceFunc func([]Attrib, interface{}) (Attrib, error)
	}
	Attrib interface {
	}
)

var productionsTable = ProdTab{
	ProdTabEntry{
		String: `S' : Program	<<  >>`,
		Id:         "S'",
		NTType:     0,
		Index:      0,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Program : Statements	<< ast.NewProgram(X[0]) >>`,
		Id:         "Program",
		NTType:     1,
		Index:      1,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewProgram(X[0])
		},
	},
	ProdTabEntry{
		String: `Statements : Statements Statement	<< ast.AppendStatement(X[0], X[1]) >>`,
		Id:         "Statements",
		NTType:     2,
		Index:      2,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.AppendStatement(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `Statements : empty	<< ast.NewStatementList() >>`,
		Id:         "Statements",
		NTType:     2,
		Index:      3,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewStatementList()
		},
	},
	ProdTabEntry{
		String: `StatementBlock : lbrace Statements rbrace	<< ast.NewBlockStatement(X[1]) >>`,
		Id:         "StatementBlock",
		NTType:     3,
		Index:      4,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewBlockStatement(X[1])
		},
	},
	ProdTabEntry{
		String: `Statement : "@" identifier assign Expression terminator	<< ast.NewIdentInit(X[1], X[3]) >>`,
		Id:         "Statement",
		NTType:     4,
		Index:      5,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewIdentInit(X[1], X[3])
		},
	},
	ProdTabEntry{
		String: `Statement : "@" identifier "[" intLit "]" assign intLit terminator	<< ast.NewTabInit(X[1], X[3], X[6]) >>`,
		Id:         "Statement",
		NTType:     4,
		Index:      6,
		NumSymbols: 8,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewTabInit(X[1], X[3], X[6])
		},
	},
	ProdTabEntry{
		String: `Statement : "if" Expression StatementBlock ElseBlock	<< ast.NewIfStatement(X[1], X[2], X[3]) >>`,
		Id:         "Statement",
		NTType:     4,
		Index:      7,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewIfStatement(X[1], X[2], X[3])
		},
	},
	ProdTabEntry{
		String: `Statement : "while" Expression StatementBlock	<< ast.NewWhileStatement(X[1], X[2]) >>`,
		Id:         "Statement",
		NTType:     4,
		Index:      8,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewWhileStatement(X[1], X[2])
		},
	},
	ProdTabEntry{
		String: `Statement : identifier assign Expression terminator	<< ast.NewAssignStatement(X[0], X[2]) >>`,
		Id:         "Statement",
		NTType:     4,
		Index:      9,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewAssignStatement(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `Statement : "wait" "(" intLit ")" terminator	<< ast.NewWaitStatement(X[2]) >>`,
		Id:         "Statement",
		NTType:     4,
		Index:      10,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewWaitStatement(X[2])
		},
	},
	ProdTabEntry{
		String: `Statement : identifier "[" Expression "]" assign Expression terminator	<< ast.NewAssignTabStatement(X[0], X[2], X[5]) >>`,
		Id:         "Statement",
		NTType:     4,
		Index:      11,
		NumSymbols: 7,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewAssignTabStatement(X[0], X[2], X[5])
		},
	},
	ProdTabEntry{
		String: `ElseBlock : "else" StatementBlock	<< X[1], nil >>`,
		Id:         "ElseBlock",
		NTType:     5,
		Index:      12,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[1], nil
		},
	},
	ProdTabEntry{
		String: `ElseBlock : empty	<<  >>`,
		Id:         "ElseBlock",
		NTType:     5,
		Index:      13,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `Expression : Expression Operation Term	<< ast.NewInfixExpression(X[0], X[2], X[1]) >>`,
		Id:         "Expression",
		NTType:     6,
		Index:      14,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewInfixExpression(X[0], X[2], X[1])
		},
	},
	ProdTabEntry{
		String: `Expression : Term	<<  >>`,
		Id:         "Expression",
		NTType:     6,
		Index:      15,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Term : intLit	<< ast.NewIntegerLiteral(X[0]) >>`,
		Id:         "Term",
		NTType:     7,
		Index:      16,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewIntegerLiteral(X[0])
		},
	},
	ProdTabEntry{
		String: `Term : identifier	<< ast.NewIdentExpression(X[0]) >>`,
		Id:         "Term",
		NTType:     7,
		Index:      17,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewIdentExpression(X[0])
		},
	},
	ProdTabEntry{
		String: `Operation : plus	<<  >>`,
		Id:         "Operation",
		NTType:     8,
		Index:      18,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Operation : minus	<<  >>`,
		Id:         "Operation",
		NTType:     8,
		Index:      19,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Operation : mul	<<  >>`,
		Id:         "Operation",
		NTType:     8,
		Index:      20,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Operation : "=="	<<  >>`,
		Id:         "Operation",
		NTType:     8,
		Index:      21,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Operation : "<"	<<  >>`,
		Id:         "Operation",
		NTType:     8,
		Index:      22,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
}
