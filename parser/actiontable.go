// Code generated by gocc; DO NOT EDIT.

package parser

type (
	actionTable [numStates]actionRow
	actionRow   struct {
		canRecover bool
		actions    [numSymbols]action
	}
)

var actionTab = actionTable{
	actionRow{ // S0
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(3), // $, reduce: Statements
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			reduce(3), // @, reduce: Statements
			reduce(3), // identifier, reduce: Statements
			nil,       // assign
			nil,       // terminator
			nil,       // [
			nil,       // intLit
			nil,       // ]
			reduce(3), // if, reduce: Statements
			reduce(3), // while, reduce: Statements
			reduce(3), // wait, reduce: Statements
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S1
		canRecover: false,
		actions: [numSymbols]action{
			nil,          // INVALID
			accept(true), // $
			nil,          // empty
			nil,          // lbrace
			nil,          // rbrace
			nil,          // @
			nil,          // identifier
			nil,          // assign
			nil,          // terminator
			nil,          // [
			nil,          // intLit
			nil,          // ]
			nil,          // if
			nil,          // while
			nil,          // wait
			nil,          // (
			nil,          // )
			nil,          // else
			nil,          // plus
			nil,          // minus
			nil,          // mul
			nil,          // ==
			nil,          // <
		},
	},
	actionRow{ // S2
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(1), // $, reduce: Program
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			shift(4),  // @
			shift(5),  // identifier
			nil,       // assign
			nil,       // terminator
			nil,       // [
			nil,       // intLit
			nil,       // ]
			shift(6),  // if
			shift(7),  // while
			shift(8),  // wait
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S3
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(2), // $, reduce: Statements
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			reduce(2), // @, reduce: Statements
			reduce(2), // identifier, reduce: Statements
			nil,       // assign
			nil,       // terminator
			nil,       // [
			nil,       // intLit
			nil,       // ]
			reduce(2), // if, reduce: Statements
			reduce(2), // while, reduce: Statements
			reduce(2), // wait, reduce: Statements
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S4
		canRecover: false,
		actions: [numSymbols]action{
			nil,      // INVALID
			nil,      // $
			nil,      // empty
			nil,      // lbrace
			nil,      // rbrace
			nil,      // @
			shift(9), // identifier
			nil,      // assign
			nil,      // terminator
			nil,      // [
			nil,      // intLit
			nil,      // ]
			nil,      // if
			nil,      // while
			nil,      // wait
			nil,      // (
			nil,      // )
			nil,      // else
			nil,      // plus
			nil,      // minus
			nil,      // mul
			nil,      // ==
			nil,      // <
		},
	},
	actionRow{ // S5
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			nil,       // @
			nil,       // identifier
			shift(10), // assign
			nil,       // terminator
			shift(11), // [
			nil,       // intLit
			nil,       // ]
			nil,       // if
			nil,       // while
			nil,       // wait
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S6
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			nil,       // @
			shift(12), // identifier
			nil,       // assign
			nil,       // terminator
			nil,       // [
			shift(14), // intLit
			nil,       // ]
			nil,       // if
			nil,       // while
			nil,       // wait
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S7
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			nil,       // @
			shift(12), // identifier
			nil,       // assign
			nil,       // terminator
			nil,       // [
			shift(14), // intLit
			nil,       // ]
			nil,       // if
			nil,       // while
			nil,       // wait
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S8
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			nil,       // @
			nil,       // identifier
			nil,       // assign
			nil,       // terminator
			nil,       // [
			nil,       // intLit
			nil,       // ]
			nil,       // if
			nil,       // while
			nil,       // wait
			shift(17), // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S9
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			nil,       // @
			nil,       // identifier
			shift(18), // assign
			nil,       // terminator
			shift(19), // [
			nil,       // intLit
			nil,       // ]
			nil,       // if
			nil,       // while
			nil,       // wait
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S10
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			nil,       // @
			shift(20), // identifier
			nil,       // assign
			nil,       // terminator
			nil,       // [
			shift(22), // intLit
			nil,       // ]
			nil,       // if
			nil,       // while
			nil,       // wait
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S11
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			nil,       // @
			shift(24), // identifier
			nil,       // assign
			nil,       // terminator
			nil,       // [
			shift(26), // intLit
			nil,       // ]
			nil,       // if
			nil,       // while
			nil,       // wait
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S12
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			reduce(17), // lbrace, reduce: Term
			nil,        // rbrace
			nil,        // @
			nil,        // identifier
			nil,        // assign
			nil,        // terminator
			nil,        // [
			nil,        // intLit
			nil,        // ]
			nil,        // if
			nil,        // while
			nil,        // wait
			nil,        // (
			nil,        // )
			nil,        // else
			reduce(17), // plus, reduce: Term
			reduce(17), // minus, reduce: Term
			reduce(17), // mul, reduce: Term
			reduce(17), // ==, reduce: Term
			reduce(17), // <, reduce: Term
		},
	},
	actionRow{ // S13
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			shift(29), // lbrace
			nil,       // rbrace
			nil,       // @
			nil,       // identifier
			nil,       // assign
			nil,       // terminator
			nil,       // [
			nil,       // intLit
			nil,       // ]
			nil,       // if
			nil,       // while
			nil,       // wait
			nil,       // (
			nil,       // )
			nil,       // else
			shift(31), // plus
			shift(32), // minus
			shift(33), // mul
			shift(34), // ==
			shift(35), // <
		},
	},
	actionRow{ // S14
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			reduce(16), // lbrace, reduce: Term
			nil,        // rbrace
			nil,        // @
			nil,        // identifier
			nil,        // assign
			nil,        // terminator
			nil,        // [
			nil,        // intLit
			nil,        // ]
			nil,        // if
			nil,        // while
			nil,        // wait
			nil,        // (
			nil,        // )
			nil,        // else
			reduce(16), // plus, reduce: Term
			reduce(16), // minus, reduce: Term
			reduce(16), // mul, reduce: Term
			reduce(16), // ==, reduce: Term
			reduce(16), // <, reduce: Term
		},
	},
	actionRow{ // S15
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			reduce(15), // lbrace, reduce: Expression
			nil,        // rbrace
			nil,        // @
			nil,        // identifier
			nil,        // assign
			nil,        // terminator
			nil,        // [
			nil,        // intLit
			nil,        // ]
			nil,        // if
			nil,        // while
			nil,        // wait
			nil,        // (
			nil,        // )
			nil,        // else
			reduce(15), // plus, reduce: Expression
			reduce(15), // minus, reduce: Expression
			reduce(15), // mul, reduce: Expression
			reduce(15), // ==, reduce: Expression
			reduce(15), // <, reduce: Expression
		},
	},
	actionRow{ // S16
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			shift(37), // lbrace
			nil,       // rbrace
			nil,       // @
			nil,       // identifier
			nil,       // assign
			nil,       // terminator
			nil,       // [
			nil,       // intLit
			nil,       // ]
			nil,       // if
			nil,       // while
			nil,       // wait
			nil,       // (
			nil,       // )
			nil,       // else
			shift(31), // plus
			shift(32), // minus
			shift(33), // mul
			shift(34), // ==
			shift(35), // <
		},
	},
	actionRow{ // S17
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			nil,       // @
			nil,       // identifier
			nil,       // assign
			nil,       // terminator
			nil,       // [
			shift(38), // intLit
			nil,       // ]
			nil,       // if
			nil,       // while
			nil,       // wait
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S18
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			nil,       // @
			shift(20), // identifier
			nil,       // assign
			nil,       // terminator
			nil,       // [
			shift(22), // intLit
			nil,       // ]
			nil,       // if
			nil,       // while
			nil,       // wait
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S19
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			nil,       // @
			nil,       // identifier
			nil,       // assign
			nil,       // terminator
			nil,       // [
			shift(40), // intLit
			nil,       // ]
			nil,       // if
			nil,       // while
			nil,       // wait
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S20
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // lbrace
			nil,        // rbrace
			nil,        // @
			nil,        // identifier
			nil,        // assign
			reduce(17), // terminator, reduce: Term
			nil,        // [
			nil,        // intLit
			nil,        // ]
			nil,        // if
			nil,        // while
			nil,        // wait
			nil,        // (
			nil,        // )
			nil,        // else
			reduce(17), // plus, reduce: Term
			reduce(17), // minus, reduce: Term
			reduce(17), // mul, reduce: Term
			reduce(17), // ==, reduce: Term
			reduce(17), // <, reduce: Term
		},
	},
	actionRow{ // S21
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			nil,       // @
			nil,       // identifier
			nil,       // assign
			shift(41), // terminator
			nil,       // [
			nil,       // intLit
			nil,       // ]
			nil,       // if
			nil,       // while
			nil,       // wait
			nil,       // (
			nil,       // )
			nil,       // else
			shift(31), // plus
			shift(32), // minus
			shift(33), // mul
			shift(34), // ==
			shift(35), // <
		},
	},
	actionRow{ // S22
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // lbrace
			nil,        // rbrace
			nil,        // @
			nil,        // identifier
			nil,        // assign
			reduce(16), // terminator, reduce: Term
			nil,        // [
			nil,        // intLit
			nil,        // ]
			nil,        // if
			nil,        // while
			nil,        // wait
			nil,        // (
			nil,        // )
			nil,        // else
			reduce(16), // plus, reduce: Term
			reduce(16), // minus, reduce: Term
			reduce(16), // mul, reduce: Term
			reduce(16), // ==, reduce: Term
			reduce(16), // <, reduce: Term
		},
	},
	actionRow{ // S23
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // lbrace
			nil,        // rbrace
			nil,        // @
			nil,        // identifier
			nil,        // assign
			reduce(15), // terminator, reduce: Expression
			nil,        // [
			nil,        // intLit
			nil,        // ]
			nil,        // if
			nil,        // while
			nil,        // wait
			nil,        // (
			nil,        // )
			nil,        // else
			reduce(15), // plus, reduce: Expression
			reduce(15), // minus, reduce: Expression
			reduce(15), // mul, reduce: Expression
			reduce(15), // ==, reduce: Expression
			reduce(15), // <, reduce: Expression
		},
	},
	actionRow{ // S24
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // lbrace
			nil,        // rbrace
			nil,        // @
			nil,        // identifier
			nil,        // assign
			nil,        // terminator
			nil,        // [
			nil,        // intLit
			reduce(17), // ], reduce: Term
			nil,        // if
			nil,        // while
			nil,        // wait
			nil,        // (
			nil,        // )
			nil,        // else
			reduce(17), // plus, reduce: Term
			reduce(17), // minus, reduce: Term
			reduce(17), // mul, reduce: Term
			reduce(17), // ==, reduce: Term
			reduce(17), // <, reduce: Term
		},
	},
	actionRow{ // S25
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			nil,       // @
			nil,       // identifier
			nil,       // assign
			nil,       // terminator
			nil,       // [
			nil,       // intLit
			shift(43), // ]
			nil,       // if
			nil,       // while
			nil,       // wait
			nil,       // (
			nil,       // )
			nil,       // else
			shift(31), // plus
			shift(32), // minus
			shift(33), // mul
			shift(34), // ==
			shift(35), // <
		},
	},
	actionRow{ // S26
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // lbrace
			nil,        // rbrace
			nil,        // @
			nil,        // identifier
			nil,        // assign
			nil,        // terminator
			nil,        // [
			nil,        // intLit
			reduce(16), // ], reduce: Term
			nil,        // if
			nil,        // while
			nil,        // wait
			nil,        // (
			nil,        // )
			nil,        // else
			reduce(16), // plus, reduce: Term
			reduce(16), // minus, reduce: Term
			reduce(16), // mul, reduce: Term
			reduce(16), // ==, reduce: Term
			reduce(16), // <, reduce: Term
		},
	},
	actionRow{ // S27
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // lbrace
			nil,        // rbrace
			nil,        // @
			nil,        // identifier
			nil,        // assign
			nil,        // terminator
			nil,        // [
			nil,        // intLit
			reduce(15), // ], reduce: Expression
			nil,        // if
			nil,        // while
			nil,        // wait
			nil,        // (
			nil,        // )
			nil,        // else
			reduce(15), // plus, reduce: Expression
			reduce(15), // minus, reduce: Expression
			reduce(15), // mul, reduce: Expression
			reduce(15), // ==, reduce: Expression
			reduce(15), // <, reduce: Expression
		},
	},
	actionRow{ // S28
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(13), // $, reduce: ElseBlock
			nil,        // empty
			nil,        // lbrace
			nil,        // rbrace
			reduce(13), // @, reduce: ElseBlock
			reduce(13), // identifier, reduce: ElseBlock
			nil,        // assign
			nil,        // terminator
			nil,        // [
			nil,        // intLit
			nil,        // ]
			reduce(13), // if, reduce: ElseBlock
			reduce(13), // while, reduce: ElseBlock
			reduce(13), // wait, reduce: ElseBlock
			nil,        // (
			nil,        // )
			shift(46),  // else
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // ==
			nil,        // <
		},
	},
	actionRow{ // S29
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			reduce(3), // rbrace, reduce: Statements
			reduce(3), // @, reduce: Statements
			reduce(3), // identifier, reduce: Statements
			nil,       // assign
			nil,       // terminator
			nil,       // [
			nil,       // intLit
			nil,       // ]
			reduce(3), // if, reduce: Statements
			reduce(3), // while, reduce: Statements
			reduce(3), // wait, reduce: Statements
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S30
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			nil,       // @
			shift(12), // identifier
			nil,       // assign
			nil,       // terminator
			nil,       // [
			shift(14), // intLit
			nil,       // ]
			nil,       // if
			nil,       // while
			nil,       // wait
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S31
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // lbrace
			nil,        // rbrace
			nil,        // @
			reduce(18), // identifier, reduce: Operation
			nil,        // assign
			nil,        // terminator
			nil,        // [
			reduce(18), // intLit, reduce: Operation
			nil,        // ]
			nil,        // if
			nil,        // while
			nil,        // wait
			nil,        // (
			nil,        // )
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // ==
			nil,        // <
		},
	},
	actionRow{ // S32
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // lbrace
			nil,        // rbrace
			nil,        // @
			reduce(19), // identifier, reduce: Operation
			nil,        // assign
			nil,        // terminator
			nil,        // [
			reduce(19), // intLit, reduce: Operation
			nil,        // ]
			nil,        // if
			nil,        // while
			nil,        // wait
			nil,        // (
			nil,        // )
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // ==
			nil,        // <
		},
	},
	actionRow{ // S33
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // lbrace
			nil,        // rbrace
			nil,        // @
			reduce(20), // identifier, reduce: Operation
			nil,        // assign
			nil,        // terminator
			nil,        // [
			reduce(20), // intLit, reduce: Operation
			nil,        // ]
			nil,        // if
			nil,        // while
			nil,        // wait
			nil,        // (
			nil,        // )
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // ==
			nil,        // <
		},
	},
	actionRow{ // S34
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // lbrace
			nil,        // rbrace
			nil,        // @
			reduce(21), // identifier, reduce: Operation
			nil,        // assign
			nil,        // terminator
			nil,        // [
			reduce(21), // intLit, reduce: Operation
			nil,        // ]
			nil,        // if
			nil,        // while
			nil,        // wait
			nil,        // (
			nil,        // )
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // ==
			nil,        // <
		},
	},
	actionRow{ // S35
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // lbrace
			nil,        // rbrace
			nil,        // @
			reduce(22), // identifier, reduce: Operation
			nil,        // assign
			nil,        // terminator
			nil,        // [
			reduce(22), // intLit, reduce: Operation
			nil,        // ]
			nil,        // if
			nil,        // while
			nil,        // wait
			nil,        // (
			nil,        // )
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // ==
			nil,        // <
		},
	},
	actionRow{ // S36
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(8), // $, reduce: Statement
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			reduce(8), // @, reduce: Statement
			reduce(8), // identifier, reduce: Statement
			nil,       // assign
			nil,       // terminator
			nil,       // [
			nil,       // intLit
			nil,       // ]
			reduce(8), // if, reduce: Statement
			reduce(8), // while, reduce: Statement
			reduce(8), // wait, reduce: Statement
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S37
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			reduce(3), // rbrace, reduce: Statements
			reduce(3), // @, reduce: Statements
			reduce(3), // identifier, reduce: Statements
			nil,       // assign
			nil,       // terminator
			nil,       // [
			nil,       // intLit
			nil,       // ]
			reduce(3), // if, reduce: Statements
			reduce(3), // while, reduce: Statements
			reduce(3), // wait, reduce: Statements
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S38
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			nil,       // @
			nil,       // identifier
			nil,       // assign
			nil,       // terminator
			nil,       // [
			nil,       // intLit
			nil,       // ]
			nil,       // if
			nil,       // while
			nil,       // wait
			nil,       // (
			shift(50), // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S39
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			nil,       // @
			nil,       // identifier
			nil,       // assign
			shift(51), // terminator
			nil,       // [
			nil,       // intLit
			nil,       // ]
			nil,       // if
			nil,       // while
			nil,       // wait
			nil,       // (
			nil,       // )
			nil,       // else
			shift(31), // plus
			shift(32), // minus
			shift(33), // mul
			shift(34), // ==
			shift(35), // <
		},
	},
	actionRow{ // S40
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			nil,       // @
			nil,       // identifier
			nil,       // assign
			nil,       // terminator
			nil,       // [
			nil,       // intLit
			shift(52), // ]
			nil,       // if
			nil,       // while
			nil,       // wait
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S41
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(9), // $, reduce: Statement
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			reduce(9), // @, reduce: Statement
			reduce(9), // identifier, reduce: Statement
			nil,       // assign
			nil,       // terminator
			nil,       // [
			nil,       // intLit
			nil,       // ]
			reduce(9), // if, reduce: Statement
			reduce(9), // while, reduce: Statement
			reduce(9), // wait, reduce: Statement
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S42
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			nil,       // @
			shift(20), // identifier
			nil,       // assign
			nil,       // terminator
			nil,       // [
			shift(22), // intLit
			nil,       // ]
			nil,       // if
			nil,       // while
			nil,       // wait
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S43
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			nil,       // @
			nil,       // identifier
			shift(54), // assign
			nil,       // terminator
			nil,       // [
			nil,       // intLit
			nil,       // ]
			nil,       // if
			nil,       // while
			nil,       // wait
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S44
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			nil,       // @
			shift(24), // identifier
			nil,       // assign
			nil,       // terminator
			nil,       // [
			shift(26), // intLit
			nil,       // ]
			nil,       // if
			nil,       // while
			nil,       // wait
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S45
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(7), // $, reduce: Statement
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			reduce(7), // @, reduce: Statement
			reduce(7), // identifier, reduce: Statement
			nil,       // assign
			nil,       // terminator
			nil,       // [
			nil,       // intLit
			nil,       // ]
			reduce(7), // if, reduce: Statement
			reduce(7), // while, reduce: Statement
			reduce(7), // wait, reduce: Statement
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S46
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			shift(37), // lbrace
			nil,       // rbrace
			nil,       // @
			nil,       // identifier
			nil,       // assign
			nil,       // terminator
			nil,       // [
			nil,       // intLit
			nil,       // ]
			nil,       // if
			nil,       // while
			nil,       // wait
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S47
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			shift(58), // rbrace
			shift(59), // @
			shift(60), // identifier
			nil,       // assign
			nil,       // terminator
			nil,       // [
			nil,       // intLit
			nil,       // ]
			shift(61), // if
			shift(62), // while
			shift(63), // wait
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S48
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			reduce(14), // lbrace, reduce: Expression
			nil,        // rbrace
			nil,        // @
			nil,        // identifier
			nil,        // assign
			nil,        // terminator
			nil,        // [
			nil,        // intLit
			nil,        // ]
			nil,        // if
			nil,        // while
			nil,        // wait
			nil,        // (
			nil,        // )
			nil,        // else
			reduce(14), // plus, reduce: Expression
			reduce(14), // minus, reduce: Expression
			reduce(14), // mul, reduce: Expression
			reduce(14), // ==, reduce: Expression
			reduce(14), // <, reduce: Expression
		},
	},
	actionRow{ // S49
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			shift(64), // rbrace
			shift(59), // @
			shift(60), // identifier
			nil,       // assign
			nil,       // terminator
			nil,       // [
			nil,       // intLit
			nil,       // ]
			shift(61), // if
			shift(62), // while
			shift(63), // wait
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S50
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			nil,       // @
			nil,       // identifier
			nil,       // assign
			shift(65), // terminator
			nil,       // [
			nil,       // intLit
			nil,       // ]
			nil,       // if
			nil,       // while
			nil,       // wait
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S51
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(5), // $, reduce: Statement
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			reduce(5), // @, reduce: Statement
			reduce(5), // identifier, reduce: Statement
			nil,       // assign
			nil,       // terminator
			nil,       // [
			nil,       // intLit
			nil,       // ]
			reduce(5), // if, reduce: Statement
			reduce(5), // while, reduce: Statement
			reduce(5), // wait, reduce: Statement
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S52
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			nil,       // @
			nil,       // identifier
			shift(66), // assign
			nil,       // terminator
			nil,       // [
			nil,       // intLit
			nil,       // ]
			nil,       // if
			nil,       // while
			nil,       // wait
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S53
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // lbrace
			nil,        // rbrace
			nil,        // @
			nil,        // identifier
			nil,        // assign
			reduce(14), // terminator, reduce: Expression
			nil,        // [
			nil,        // intLit
			nil,        // ]
			nil,        // if
			nil,        // while
			nil,        // wait
			nil,        // (
			nil,        // )
			nil,        // else
			reduce(14), // plus, reduce: Expression
			reduce(14), // minus, reduce: Expression
			reduce(14), // mul, reduce: Expression
			reduce(14), // ==, reduce: Expression
			reduce(14), // <, reduce: Expression
		},
	},
	actionRow{ // S54
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			nil,       // @
			shift(20), // identifier
			nil,       // assign
			nil,       // terminator
			nil,       // [
			shift(22), // intLit
			nil,       // ]
			nil,       // if
			nil,       // while
			nil,       // wait
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S55
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // lbrace
			nil,        // rbrace
			nil,        // @
			nil,        // identifier
			nil,        // assign
			nil,        // terminator
			nil,        // [
			nil,        // intLit
			reduce(14), // ], reduce: Expression
			nil,        // if
			nil,        // while
			nil,        // wait
			nil,        // (
			nil,        // )
			nil,        // else
			reduce(14), // plus, reduce: Expression
			reduce(14), // minus, reduce: Expression
			reduce(14), // mul, reduce: Expression
			reduce(14), // ==, reduce: Expression
			reduce(14), // <, reduce: Expression
		},
	},
	actionRow{ // S56
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(12), // $, reduce: ElseBlock
			nil,        // empty
			nil,        // lbrace
			nil,        // rbrace
			reduce(12), // @, reduce: ElseBlock
			reduce(12), // identifier, reduce: ElseBlock
			nil,        // assign
			nil,        // terminator
			nil,        // [
			nil,        // intLit
			nil,        // ]
			reduce(12), // if, reduce: ElseBlock
			reduce(12), // while, reduce: ElseBlock
			reduce(12), // wait, reduce: ElseBlock
			nil,        // (
			nil,        // )
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // ==
			nil,        // <
		},
	},
	actionRow{ // S57
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			reduce(2), // rbrace, reduce: Statements
			reduce(2), // @, reduce: Statements
			reduce(2), // identifier, reduce: Statements
			nil,       // assign
			nil,       // terminator
			nil,       // [
			nil,       // intLit
			nil,       // ]
			reduce(2), // if, reduce: Statements
			reduce(2), // while, reduce: Statements
			reduce(2), // wait, reduce: Statements
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S58
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(4), // $, reduce: StatementBlock
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			reduce(4), // @, reduce: StatementBlock
			reduce(4), // identifier, reduce: StatementBlock
			nil,       // assign
			nil,       // terminator
			nil,       // [
			nil,       // intLit
			nil,       // ]
			reduce(4), // if, reduce: StatementBlock
			reduce(4), // while, reduce: StatementBlock
			reduce(4), // wait, reduce: StatementBlock
			nil,       // (
			nil,       // )
			reduce(4), // else, reduce: StatementBlock
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S59
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			nil,       // @
			shift(68), // identifier
			nil,       // assign
			nil,       // terminator
			nil,       // [
			nil,       // intLit
			nil,       // ]
			nil,       // if
			nil,       // while
			nil,       // wait
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S60
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			nil,       // @
			nil,       // identifier
			shift(69), // assign
			nil,       // terminator
			shift(70), // [
			nil,       // intLit
			nil,       // ]
			nil,       // if
			nil,       // while
			nil,       // wait
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S61
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			nil,       // @
			shift(12), // identifier
			nil,       // assign
			nil,       // terminator
			nil,       // [
			shift(14), // intLit
			nil,       // ]
			nil,       // if
			nil,       // while
			nil,       // wait
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S62
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			nil,       // @
			shift(12), // identifier
			nil,       // assign
			nil,       // terminator
			nil,       // [
			shift(14), // intLit
			nil,       // ]
			nil,       // if
			nil,       // while
			nil,       // wait
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S63
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			nil,       // @
			nil,       // identifier
			nil,       // assign
			nil,       // terminator
			nil,       // [
			nil,       // intLit
			nil,       // ]
			nil,       // if
			nil,       // while
			nil,       // wait
			shift(73), // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S64
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(4), // $, reduce: StatementBlock
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			reduce(4), // @, reduce: StatementBlock
			reduce(4), // identifier, reduce: StatementBlock
			nil,       // assign
			nil,       // terminator
			nil,       // [
			nil,       // intLit
			nil,       // ]
			reduce(4), // if, reduce: StatementBlock
			reduce(4), // while, reduce: StatementBlock
			reduce(4), // wait, reduce: StatementBlock
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S65
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(10), // $, reduce: Statement
			nil,        // empty
			nil,        // lbrace
			nil,        // rbrace
			reduce(10), // @, reduce: Statement
			reduce(10), // identifier, reduce: Statement
			nil,        // assign
			nil,        // terminator
			nil,        // [
			nil,        // intLit
			nil,        // ]
			reduce(10), // if, reduce: Statement
			reduce(10), // while, reduce: Statement
			reduce(10), // wait, reduce: Statement
			nil,        // (
			nil,        // )
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // ==
			nil,        // <
		},
	},
	actionRow{ // S66
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			nil,       // @
			nil,       // identifier
			nil,       // assign
			nil,       // terminator
			nil,       // [
			shift(74), // intLit
			nil,       // ]
			nil,       // if
			nil,       // while
			nil,       // wait
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S67
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			nil,       // @
			nil,       // identifier
			nil,       // assign
			shift(75), // terminator
			nil,       // [
			nil,       // intLit
			nil,       // ]
			nil,       // if
			nil,       // while
			nil,       // wait
			nil,       // (
			nil,       // )
			nil,       // else
			shift(31), // plus
			shift(32), // minus
			shift(33), // mul
			shift(34), // ==
			shift(35), // <
		},
	},
	actionRow{ // S68
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			nil,       // @
			nil,       // identifier
			shift(76), // assign
			nil,       // terminator
			shift(77), // [
			nil,       // intLit
			nil,       // ]
			nil,       // if
			nil,       // while
			nil,       // wait
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S69
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			nil,       // @
			shift(20), // identifier
			nil,       // assign
			nil,       // terminator
			nil,       // [
			shift(22), // intLit
			nil,       // ]
			nil,       // if
			nil,       // while
			nil,       // wait
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S70
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			nil,       // @
			shift(24), // identifier
			nil,       // assign
			nil,       // terminator
			nil,       // [
			shift(26), // intLit
			nil,       // ]
			nil,       // if
			nil,       // while
			nil,       // wait
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S71
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			shift(81), // lbrace
			nil,       // rbrace
			nil,       // @
			nil,       // identifier
			nil,       // assign
			nil,       // terminator
			nil,       // [
			nil,       // intLit
			nil,       // ]
			nil,       // if
			nil,       // while
			nil,       // wait
			nil,       // (
			nil,       // )
			nil,       // else
			shift(31), // plus
			shift(32), // minus
			shift(33), // mul
			shift(34), // ==
			shift(35), // <
		},
	},
	actionRow{ // S72
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			shift(83), // lbrace
			nil,       // rbrace
			nil,       // @
			nil,       // identifier
			nil,       // assign
			nil,       // terminator
			nil,       // [
			nil,       // intLit
			nil,       // ]
			nil,       // if
			nil,       // while
			nil,       // wait
			nil,       // (
			nil,       // )
			nil,       // else
			shift(31), // plus
			shift(32), // minus
			shift(33), // mul
			shift(34), // ==
			shift(35), // <
		},
	},
	actionRow{ // S73
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			nil,       // @
			nil,       // identifier
			nil,       // assign
			nil,       // terminator
			nil,       // [
			shift(84), // intLit
			nil,       // ]
			nil,       // if
			nil,       // while
			nil,       // wait
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S74
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			nil,       // @
			nil,       // identifier
			nil,       // assign
			shift(85), // terminator
			nil,       // [
			nil,       // intLit
			nil,       // ]
			nil,       // if
			nil,       // while
			nil,       // wait
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S75
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			reduce(11), // $, reduce: Statement
			nil,        // empty
			nil,        // lbrace
			nil,        // rbrace
			reduce(11), // @, reduce: Statement
			reduce(11), // identifier, reduce: Statement
			nil,        // assign
			nil,        // terminator
			nil,        // [
			nil,        // intLit
			nil,        // ]
			reduce(11), // if, reduce: Statement
			reduce(11), // while, reduce: Statement
			reduce(11), // wait, reduce: Statement
			nil,        // (
			nil,        // )
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // ==
			nil,        // <
		},
	},
	actionRow{ // S76
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			nil,       // @
			shift(20), // identifier
			nil,       // assign
			nil,       // terminator
			nil,       // [
			shift(22), // intLit
			nil,       // ]
			nil,       // if
			nil,       // while
			nil,       // wait
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S77
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			nil,       // @
			nil,       // identifier
			nil,       // assign
			nil,       // terminator
			nil,       // [
			shift(87), // intLit
			nil,       // ]
			nil,       // if
			nil,       // while
			nil,       // wait
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S78
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			nil,       // @
			nil,       // identifier
			nil,       // assign
			shift(88), // terminator
			nil,       // [
			nil,       // intLit
			nil,       // ]
			nil,       // if
			nil,       // while
			nil,       // wait
			nil,       // (
			nil,       // )
			nil,       // else
			shift(31), // plus
			shift(32), // minus
			shift(33), // mul
			shift(34), // ==
			shift(35), // <
		},
	},
	actionRow{ // S79
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			nil,       // @
			nil,       // identifier
			nil,       // assign
			nil,       // terminator
			nil,       // [
			nil,       // intLit
			shift(89), // ]
			nil,       // if
			nil,       // while
			nil,       // wait
			nil,       // (
			nil,       // )
			nil,       // else
			shift(31), // plus
			shift(32), // minus
			shift(33), // mul
			shift(34), // ==
			shift(35), // <
		},
	},
	actionRow{ // S80
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // lbrace
			reduce(13), // rbrace, reduce: ElseBlock
			reduce(13), // @, reduce: ElseBlock
			reduce(13), // identifier, reduce: ElseBlock
			nil,        // assign
			nil,        // terminator
			nil,        // [
			nil,        // intLit
			nil,        // ]
			reduce(13), // if, reduce: ElseBlock
			reduce(13), // while, reduce: ElseBlock
			reduce(13), // wait, reduce: ElseBlock
			nil,        // (
			nil,        // )
			shift(91),  // else
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // ==
			nil,        // <
		},
	},
	actionRow{ // S81
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			reduce(3), // rbrace, reduce: Statements
			reduce(3), // @, reduce: Statements
			reduce(3), // identifier, reduce: Statements
			nil,       // assign
			nil,       // terminator
			nil,       // [
			nil,       // intLit
			nil,       // ]
			reduce(3), // if, reduce: Statements
			reduce(3), // while, reduce: Statements
			reduce(3), // wait, reduce: Statements
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S82
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			reduce(8), // rbrace, reduce: Statement
			reduce(8), // @, reduce: Statement
			reduce(8), // identifier, reduce: Statement
			nil,       // assign
			nil,       // terminator
			nil,       // [
			nil,       // intLit
			nil,       // ]
			reduce(8), // if, reduce: Statement
			reduce(8), // while, reduce: Statement
			reduce(8), // wait, reduce: Statement
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S83
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			reduce(3), // rbrace, reduce: Statements
			reduce(3), // @, reduce: Statements
			reduce(3), // identifier, reduce: Statements
			nil,       // assign
			nil,       // terminator
			nil,       // [
			nil,       // intLit
			nil,       // ]
			reduce(3), // if, reduce: Statements
			reduce(3), // while, reduce: Statements
			reduce(3), // wait, reduce: Statements
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S84
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			nil,       // @
			nil,       // identifier
			nil,       // assign
			nil,       // terminator
			nil,       // [
			nil,       // intLit
			nil,       // ]
			nil,       // if
			nil,       // while
			nil,       // wait
			nil,       // (
			shift(94), // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S85
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(6), // $, reduce: Statement
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			reduce(6), // @, reduce: Statement
			reduce(6), // identifier, reduce: Statement
			nil,       // assign
			nil,       // terminator
			nil,       // [
			nil,       // intLit
			nil,       // ]
			reduce(6), // if, reduce: Statement
			reduce(6), // while, reduce: Statement
			reduce(6), // wait, reduce: Statement
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S86
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			nil,       // @
			nil,       // identifier
			nil,       // assign
			shift(95), // terminator
			nil,       // [
			nil,       // intLit
			nil,       // ]
			nil,       // if
			nil,       // while
			nil,       // wait
			nil,       // (
			nil,       // )
			nil,       // else
			shift(31), // plus
			shift(32), // minus
			shift(33), // mul
			shift(34), // ==
			shift(35), // <
		},
	},
	actionRow{ // S87
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			nil,       // @
			nil,       // identifier
			nil,       // assign
			nil,       // terminator
			nil,       // [
			nil,       // intLit
			shift(96), // ]
			nil,       // if
			nil,       // while
			nil,       // wait
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S88
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			reduce(9), // rbrace, reduce: Statement
			reduce(9), // @, reduce: Statement
			reduce(9), // identifier, reduce: Statement
			nil,       // assign
			nil,       // terminator
			nil,       // [
			nil,       // intLit
			nil,       // ]
			reduce(9), // if, reduce: Statement
			reduce(9), // while, reduce: Statement
			reduce(9), // wait, reduce: Statement
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S89
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			nil,       // @
			nil,       // identifier
			shift(97), // assign
			nil,       // terminator
			nil,       // [
			nil,       // intLit
			nil,       // ]
			nil,       // if
			nil,       // while
			nil,       // wait
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S90
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			reduce(7), // rbrace, reduce: Statement
			reduce(7), // @, reduce: Statement
			reduce(7), // identifier, reduce: Statement
			nil,       // assign
			nil,       // terminator
			nil,       // [
			nil,       // intLit
			nil,       // ]
			reduce(7), // if, reduce: Statement
			reduce(7), // while, reduce: Statement
			reduce(7), // wait, reduce: Statement
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S91
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			shift(83), // lbrace
			nil,       // rbrace
			nil,       // @
			nil,       // identifier
			nil,       // assign
			nil,       // terminator
			nil,       // [
			nil,       // intLit
			nil,       // ]
			nil,       // if
			nil,       // while
			nil,       // wait
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S92
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			shift(99), // rbrace
			shift(59), // @
			shift(60), // identifier
			nil,       // assign
			nil,       // terminator
			nil,       // [
			nil,       // intLit
			nil,       // ]
			shift(61), // if
			shift(62), // while
			shift(63), // wait
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S93
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // lbrace
			shift(100), // rbrace
			shift(59),  // @
			shift(60),  // identifier
			nil,        // assign
			nil,        // terminator
			nil,        // [
			nil,        // intLit
			nil,        // ]
			shift(61),  // if
			shift(62),  // while
			shift(63),  // wait
			nil,        // (
			nil,        // )
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // ==
			nil,        // <
		},
	},
	actionRow{ // S94
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // lbrace
			nil,        // rbrace
			nil,        // @
			nil,        // identifier
			nil,        // assign
			shift(101), // terminator
			nil,        // [
			nil,        // intLit
			nil,        // ]
			nil,        // if
			nil,        // while
			nil,        // wait
			nil,        // (
			nil,        // )
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // ==
			nil,        // <
		},
	},
	actionRow{ // S95
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			reduce(5), // rbrace, reduce: Statement
			reduce(5), // @, reduce: Statement
			reduce(5), // identifier, reduce: Statement
			nil,       // assign
			nil,       // terminator
			nil,       // [
			nil,       // intLit
			nil,       // ]
			reduce(5), // if, reduce: Statement
			reduce(5), // while, reduce: Statement
			reduce(5), // wait, reduce: Statement
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S96
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // lbrace
			nil,        // rbrace
			nil,        // @
			nil,        // identifier
			shift(102), // assign
			nil,        // terminator
			nil,        // [
			nil,        // intLit
			nil,        // ]
			nil,        // if
			nil,        // while
			nil,        // wait
			nil,        // (
			nil,        // )
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // ==
			nil,        // <
		},
	},
	actionRow{ // S97
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			nil,       // rbrace
			nil,       // @
			shift(20), // identifier
			nil,       // assign
			nil,       // terminator
			nil,       // [
			shift(22), // intLit
			nil,       // ]
			nil,       // if
			nil,       // while
			nil,       // wait
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S98
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // lbrace
			reduce(12), // rbrace, reduce: ElseBlock
			reduce(12), // @, reduce: ElseBlock
			reduce(12), // identifier, reduce: ElseBlock
			nil,        // assign
			nil,        // terminator
			nil,        // [
			nil,        // intLit
			nil,        // ]
			reduce(12), // if, reduce: ElseBlock
			reduce(12), // while, reduce: ElseBlock
			reduce(12), // wait, reduce: ElseBlock
			nil,        // (
			nil,        // )
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // ==
			nil,        // <
		},
	},
	actionRow{ // S99
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			reduce(4), // rbrace, reduce: StatementBlock
			reduce(4), // @, reduce: StatementBlock
			reduce(4), // identifier, reduce: StatementBlock
			nil,       // assign
			nil,       // terminator
			nil,       // [
			nil,       // intLit
			nil,       // ]
			reduce(4), // if, reduce: StatementBlock
			reduce(4), // while, reduce: StatementBlock
			reduce(4), // wait, reduce: StatementBlock
			nil,       // (
			nil,       // )
			reduce(4), // else, reduce: StatementBlock
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S100
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			reduce(4), // rbrace, reduce: StatementBlock
			reduce(4), // @, reduce: StatementBlock
			reduce(4), // identifier, reduce: StatementBlock
			nil,       // assign
			nil,       // terminator
			nil,       // [
			nil,       // intLit
			nil,       // ]
			reduce(4), // if, reduce: StatementBlock
			reduce(4), // while, reduce: StatementBlock
			reduce(4), // wait, reduce: StatementBlock
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
	actionRow{ // S101
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // lbrace
			reduce(10), // rbrace, reduce: Statement
			reduce(10), // @, reduce: Statement
			reduce(10), // identifier, reduce: Statement
			nil,        // assign
			nil,        // terminator
			nil,        // [
			nil,        // intLit
			nil,        // ]
			reduce(10), // if, reduce: Statement
			reduce(10), // while, reduce: Statement
			reduce(10), // wait, reduce: Statement
			nil,        // (
			nil,        // )
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // ==
			nil,        // <
		},
	},
	actionRow{ // S102
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // lbrace
			nil,        // rbrace
			nil,        // @
			nil,        // identifier
			nil,        // assign
			nil,        // terminator
			nil,        // [
			shift(104), // intLit
			nil,        // ]
			nil,        // if
			nil,        // while
			nil,        // wait
			nil,        // (
			nil,        // )
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // ==
			nil,        // <
		},
	},
	actionRow{ // S103
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // lbrace
			nil,        // rbrace
			nil,        // @
			nil,        // identifier
			nil,        // assign
			shift(105), // terminator
			nil,        // [
			nil,        // intLit
			nil,        // ]
			nil,        // if
			nil,        // while
			nil,        // wait
			nil,        // (
			nil,        // )
			nil,        // else
			shift(31),  // plus
			shift(32),  // minus
			shift(33),  // mul
			shift(34),  // ==
			shift(35),  // <
		},
	},
	actionRow{ // S104
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // lbrace
			nil,        // rbrace
			nil,        // @
			nil,        // identifier
			nil,        // assign
			shift(106), // terminator
			nil,        // [
			nil,        // intLit
			nil,        // ]
			nil,        // if
			nil,        // while
			nil,        // wait
			nil,        // (
			nil,        // )
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // ==
			nil,        // <
		},
	},
	actionRow{ // S105
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // lbrace
			reduce(11), // rbrace, reduce: Statement
			reduce(11), // @, reduce: Statement
			reduce(11), // identifier, reduce: Statement
			nil,        // assign
			nil,        // terminator
			nil,        // [
			nil,        // intLit
			nil,        // ]
			reduce(11), // if, reduce: Statement
			reduce(11), // while, reduce: Statement
			reduce(11), // wait, reduce: Statement
			nil,        // (
			nil,        // )
			nil,        // else
			nil,        // plus
			nil,        // minus
			nil,        // mul
			nil,        // ==
			nil,        // <
		},
	},
	actionRow{ // S106
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // lbrace
			reduce(6), // rbrace, reduce: Statement
			reduce(6), // @, reduce: Statement
			reduce(6), // identifier, reduce: Statement
			nil,       // assign
			nil,       // terminator
			nil,       // [
			nil,       // intLit
			nil,       // ]
			reduce(6), // if, reduce: Statement
			reduce(6), // while, reduce: Statement
			reduce(6), // wait, reduce: Statement
			nil,       // (
			nil,       // )
			nil,       // else
			nil,       // plus
			nil,       // minus
			nil,       // mul
			nil,       // ==
			nil,       // <
		},
	},
}
