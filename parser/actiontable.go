// Code generated by gocc; DO NOT EDIT.

package parser

type (
	actionTable [numStates]actionRow
	actionRow   struct {
		canRecover bool
		actions    [numSymbols]action
	}
)

var actionTab = actionTable{
	actionRow{ // S0
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(3), // $, reduce: Statements
			nil,       // empty
			reduce(3), // @, reduce: Statements
			reduce(3), // identifier, reduce: Statements
			nil,       // assign
			nil,       // terminator
			nil,       // intLit
			nil,       // plus
			nil,       // minus
		},
	},
	actionRow{ // S1
		canRecover: false,
		actions: [numSymbols]action{
			nil,          // INVALID
			accept(true), // $
			nil,          // empty
			nil,          // @
			nil,          // identifier
			nil,          // assign
			nil,          // terminator
			nil,          // intLit
			nil,          // plus
			nil,          // minus
		},
	},
	actionRow{ // S2
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(1), // $, reduce: Program
			nil,       // empty
			shift(4),  // @
			shift(5),  // identifier
			nil,       // assign
			nil,       // terminator
			nil,       // intLit
			nil,       // plus
			nil,       // minus
		},
	},
	actionRow{ // S3
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(2), // $, reduce: Statements
			nil,       // empty
			reduce(2), // @, reduce: Statements
			reduce(2), // identifier, reduce: Statements
			nil,       // assign
			nil,       // terminator
			nil,       // intLit
			nil,       // plus
			nil,       // minus
		},
	},
	actionRow{ // S4
		canRecover: false,
		actions: [numSymbols]action{
			nil,      // INVALID
			nil,      // $
			nil,      // empty
			nil,      // @
			shift(6), // identifier
			nil,      // assign
			nil,      // terminator
			nil,      // intLit
			nil,      // plus
			nil,      // minus
		},
	},
	actionRow{ // S5
		canRecover: false,
		actions: [numSymbols]action{
			nil,      // INVALID
			nil,      // $
			nil,      // empty
			nil,      // @
			nil,      // identifier
			shift(7), // assign
			nil,      // terminator
			nil,      // intLit
			nil,      // plus
			nil,      // minus
		},
	},
	actionRow{ // S6
		canRecover: false,
		actions: [numSymbols]action{
			nil,      // INVALID
			nil,      // $
			nil,      // empty
			nil,      // @
			nil,      // identifier
			shift(8), // assign
			nil,      // terminator
			nil,      // intLit
			nil,      // plus
			nil,      // minus
		},
	},
	actionRow{ // S7
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // @
			shift(9),  // identifier
			nil,       // assign
			nil,       // terminator
			shift(12), // intLit
			nil,       // plus
			nil,       // minus
		},
	},
	actionRow{ // S8
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // @
			shift(9),  // identifier
			nil,       // assign
			nil,       // terminator
			shift(12), // intLit
			nil,       // plus
			nil,       // minus
		},
	},
	actionRow{ // S9
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // @
			nil,       // identifier
			nil,       // assign
			reduce(9), // terminator, reduce: Term
			nil,       // intLit
			reduce(9), // plus, reduce: Term
			reduce(9), // minus, reduce: Term
		},
	},
	actionRow{ // S10
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // @
			nil,       // identifier
			nil,       // assign
			shift(14), // terminator
			nil,       // intLit
			shift(16), // plus
			shift(17), // minus
		},
	},
	actionRow{ // S11
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // @
			nil,       // identifier
			nil,       // assign
			reduce(7), // terminator, reduce: Expression
			nil,       // intLit
			reduce(7), // plus, reduce: Expression
			reduce(7), // minus, reduce: Expression
		},
	},
	actionRow{ // S12
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // @
			nil,       // identifier
			nil,       // assign
			reduce(8), // terminator, reduce: Term
			nil,       // intLit
			reduce(8), // plus, reduce: Term
			reduce(8), // minus, reduce: Term
		},
	},
	actionRow{ // S13
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // @
			nil,       // identifier
			nil,       // assign
			shift(18), // terminator
			nil,       // intLit
			shift(16), // plus
			shift(17), // minus
		},
	},
	actionRow{ // S14
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(5), // $, reduce: Statement
			nil,       // empty
			reduce(5), // @, reduce: Statement
			reduce(5), // identifier, reduce: Statement
			nil,       // assign
			nil,       // terminator
			nil,       // intLit
			nil,       // plus
			nil,       // minus
		},
	},
	actionRow{ // S15
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // @
			shift(9),  // identifier
			nil,       // assign
			nil,       // terminator
			shift(12), // intLit
			nil,       // plus
			nil,       // minus
		},
	},
	actionRow{ // S16
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // @
			reduce(10), // identifier, reduce: Operation
			nil,        // assign
			nil,        // terminator
			reduce(10), // intLit, reduce: Operation
			nil,        // plus
			nil,        // minus
		},
	},
	actionRow{ // S17
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // $
			nil,        // empty
			nil,        // @
			reduce(11), // identifier, reduce: Operation
			nil,        // assign
			nil,        // terminator
			reduce(11), // intLit, reduce: Operation
			nil,        // plus
			nil,        // minus
		},
	},
	actionRow{ // S18
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(4), // $, reduce: Statement
			nil,       // empty
			reduce(4), // @, reduce: Statement
			reduce(4), // identifier, reduce: Statement
			nil,       // assign
			nil,       // terminator
			nil,       // intLit
			nil,       // plus
			nil,       // minus
		},
	},
	actionRow{ // S19
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // $
			nil,       // empty
			nil,       // @
			nil,       // identifier
			nil,       // assign
			reduce(6), // terminator, reduce: Expression
			nil,       // intLit
			reduce(6), // plus, reduce: Expression
			reduce(6), // minus, reduce: Expression
		},
	},
}
